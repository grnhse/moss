<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>In the Weeds - A blog by the Greenhouse Engineering Team</title>
    <description>a blog by the Greenhouse Engineering team</description>
    <link>https://tech.greenhouse.io/</link>
    <atom:link href="https://tech.greenhouse.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 24 May 2016 12:10:39 -0400</pubDate>
    <lastBuildDate>Tue, 24 May 2016 12:10:39 -0400</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Moss, a natural language explanation tree generator</title>
        <description>&lt;p&gt;This post presents a Javascript framework called &lt;a href=&quot;https://github.com/grnhse/moss&quot;&gt;Moss&lt;/a&gt;, a natural language explanation tree generator. Moss produces interactive webpages from natural language plaintext explanations.&lt;/p&gt;

&lt;p&gt;A data file of plaintext explanation might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;New York City is composed of five boroughs. New York City contains the Bronx.

New York City contains the Bronx. The Bronx contains Bedford Park.

The Bronx contains Bedford Park, a neighborhood in the northwest Bronx.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which would produce this:&lt;/p&gt;

&lt;iframe style=&quot;display:block; margin:auto;&quot; width=&quot;500px&quot; height=&quot;200px&quot; src=&quot;/javascripts/moss/example_1/index.html&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Pages begin with the first paragraph of the file displayed. Clauses mentioned in the first paragraph that correspond to the first clauses of later paragraphs become links. Clicking a link displays the paragraph  of that clause below the current paragraph.&lt;/p&gt;

&lt;p&gt;A paragraph can have multiple child paragraphs, producing a tree:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;New York City is composed of five boroughs. New York City contains the Bronx.

New York City contains the Bronx. The Bronx contains Bedford Park. The Bronx contains Woodlawn.

The Bronx contains Bedford Park. Bedford Park is a neighborhood in the northwest Bronx.

The Bronx contains Woodlawn. Woodlawn is a neighborhood in the north Bronx.
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe style=&quot;display:block; margin:auto;&quot; width=&quot;500px&quot; height=&quot;220px&quot; src=&quot;/javascripts/moss/example_2/index.html&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Only one explanation path can be displayed at a time, so opening a different child of an earlier paragraph will collapse the current path.&lt;/p&gt;

&lt;p&gt;Suppose I wanted to make a tangential reference from one paragraph from another. For this, I would use an object reference. Consider the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;New York City is composed of five boroughs. New York City contains the Bronx.

New York City contains the Bronx. The Bronx contains Bedford Park. The Bronx contains Woodlawn.

The Bronx contains Bedford Park, similar to how the Bronx contains Woodlawn.

The Bronx contains Woodlawn, similar to how the Bronx contains Bedford Park.
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe style=&quot;display:block; margin:auto;&quot; width=&quot;500px&quot; height=&quot;370px&quot; src=&quot;/javascripts/moss/example_3/index.html&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;If a paragraph references the first clause of another paragraph, an object link is created. Clicking an object link appends to the page a derivation paragraph, a copy of the referenced paragraph that is provided inline so that you can read it without navigating to another part of the tree. The first clause of the paragraph becomes a link, and clicking it will display the parent of that paragraph below. Clicking these links will take you from the referenced paragraph all the way up to the root of the tree, giving you the full context of the reference.&lt;/p&gt;

&lt;p&gt;Derivation paragraphs are wrapped in parentheses and are not considered part of the current path. Clicking an earlier link and moving to a different explanation path clears derivation paragraphs from view.&lt;/p&gt;

&lt;h3 id=&quot;use-cases&quot;&gt;Use cases&lt;/h3&gt;

&lt;p&gt;When might you use Moss?&lt;/p&gt;

&lt;p&gt;You might use Moss to reduce the number of documents in an organization. An organization keeps track of many explanations, and they often span multiple documents. It might not always be clear to everyone what is in which document or which documents exist. Moss allows you to make a single tree of paragraphs that contains the equivalent of many documents. Rather than having an index or table of contents, you would just have introductory paragraphs, outlining the scope of the domain to the reader and allowing them browse to their area of interest without knowing in advance where something is stored. It is also easier to add new information to a tree than a document because the surface area for additions is greater.&lt;/p&gt;

&lt;p&gt;You might use Moss for storing explanations that are very large. If you had a tree of one million paragraphs, each with four child nodes, no paragraph would be at a path of greater than 10 paragraphs. This means that I could find what I’m looking for in just 10 clicks, as opposed to having to skim through every item of a list. Even if you grouped things by topic and sequentially scanned the topics, nothing is going to beat a binary search style approach for fast lookup at scale.&lt;/p&gt;

&lt;h3 id=&quot;uses-in-software-development&quot;&gt;Uses in software development&lt;/h3&gt;

&lt;p&gt;You might use Moss to represent the same explanation at multiple levels of abstraction. When documenting a program you could write an explanation starting with a brief description the desired program behavior and then use links to descend into greater and greater detail until every implementation detail has been subsumed. Every class or variable would be the leaf node of a path representing the train of thought which led to the creation of that entity, and URLs to that path could be checked into source code. The tree could even begin before the desired program behavior, starting instead with the original business and product reasons which gave rise to the feature in the first place. With an explanation tree, the full context of every decision is always visible, and so choices which defeat the purpose of a feature or initiative can be more easily identified by any team member.&lt;/p&gt;

&lt;p&gt;Every pull request that changes code changes some part of the existing explanation of the code base – with Moss running in your &lt;code&gt;/docs&lt;/code&gt; directory you can see the ‘diffs’ to the explanation that were introduced by each PR.&lt;/p&gt;

&lt;h3 id=&quot;design-goals&quot;&gt;Design Goals&lt;/h3&gt;

&lt;p&gt;Moss is an attempt to couple metadata about explanatory text with the explanatory text itself. There are no titles, no documents, no categories, no classifications, no markup language, no tags, no hypertext references, only sentences which contain natural language references to other sentences. All metadata must be expressed as regular data, in natural language. Instead of tagging something ‘x’, you would write in a sentence that it is x. The document header is the subject of the first sentence. URLs cannot be decoupled from the independent clauses of the paragraphs they address. There are no redirects – if you want one clause to redirect to another, you would have to provide a sentence explaining why the old one is somehow equivalent to the new one, and that sentence would itself be the redirect.&lt;/p&gt;

&lt;p&gt;Moss couples the location of a paragraph with its context. You can’t just add whatever you want, the place at which you add something is itself the first sentence of the thing you are adding. This forces writers to demonstrate how what they are saying is germane to the existing explanation, and to decide precisely who should see when and what existing information it should displace.&lt;/p&gt;

&lt;p&gt;A Moss URL should represent the state of an explanation. When I give someone a Moss URL, they have a pointer to a particular location in the tree. I know that they can scroll up and get context, or browse down and see details, or burrow into object links to get background information on a reference.&lt;/p&gt;

&lt;p&gt;The Moss UI is an attempt to mimic the interface presented to the listener by a human explainer. Follow-up questions that you could ask of a person should be presented as links in the interface. Conversely, Moss attempts to not gratuitously linkify keywords that do not correspond to valid follow-up questions. Moss never presents you with a link that leaves the page, because following a reference in a real explanation continues the current explanation.&lt;/p&gt;

&lt;p&gt;Moss is not interested in understanding the content of the explanation, only in the references between parts of the explanation which it renders as links.&lt;/p&gt;

&lt;p&gt;It is called Moss because the idea is that you might want to cover something with a thin layer of explanation.&lt;/p&gt;

&lt;p&gt;Please let us know if you have any questions or suggestions. We welcome contributors and bug reports on the Github repository.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks to Aaron Gibralter for reading an early draft of this post.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 May 2016 12:10:38 -0400</pubDate>
        <link>https://tech.greenhouse.io/2016/05/24/moss.html</link>
        <guid isPermaLink="true">https://tech.greenhouse.io/2016/05/24/moss.html</guid>
        
        <category>moss</category>
        
        <category>code-documentation</category>
        
        
      </item>
    
      <item>
        <title>Thors method name limitations</title>
        <description>&lt;p&gt;We designed a RESTy api consumer not too long ago, and we wanted to use resource actions. Let’s say, &lt;code&gt;users&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;We conceived the following API:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;my_app users                                &lt;span class=&quot;c&quot;&gt;# Would list users&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;my_app users:delete &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ID&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;                    &lt;span class=&quot;c&quot;&gt;# Would delete user with id ID&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;my_app users:new &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;NAME&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;EMAIL&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ATTRIBUTE&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Would create an user&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;… and we wanted to use &lt;a href=&quot;http://whatisthor.com&quot;&gt;Thor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In thor, you define a command line program very easily. It takes care of argument parsing,
option checking, defaults setting, etc. For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# === blah.rb ===&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;thor&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Blah&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thor&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Blah&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;blah.rb hello world
&lt;span class=&quot;c&quot;&gt;# Hello, world&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since your program actions map 1:1 to methods in your thor class, you can’t define anything named &lt;code&gt;users:delete&lt;/code&gt;, since it is a syntax error.&lt;/p&gt;

&lt;p&gt;What to do?&lt;/p&gt;

&lt;p&gt;Luckily, one of Ruby’s greatest strengths is its metaprogramming. What is it? Well, that’s a subject worthy of a few books… not a few lines :)&lt;/p&gt;

&lt;p&gt;For now, let’s just focus on &lt;code&gt;define_method&lt;/code&gt;. You can call &lt;code&gt;define_method&lt;/code&gt; on any object to create a new method at runtime. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;Object:0x007f8ce51cf920&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It’s syntax is a bit cumbersome when you’re modifying an already instantiated object, of course. But, at class definition time, it allows you to declare methods dynamically. For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;sx&quot;&gt;%w(a b c)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;Foo:0x007f9d1c942fa8&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#a()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;B&amp;quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#b(a, B)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;B&amp;quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#c(a, B)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#c(a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, putting it all together:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;thor&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyCli&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thor&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;users:new [NAME] [EMAIL] [ATTRIBUTE]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Create an user named [NAME]...&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;users:new&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ... do something here that creates&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# the user and returns something&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# meaningful...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;my_cli &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;
Commands:
  my_cli &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;COMMAND&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;                        &lt;span class=&quot;c&quot;&gt;# Describe available commands or one specific command&lt;/span&gt;
  my_cli users:new &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;NAME&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;EMAIL&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ATTRIBUTE&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Create an user named [NAME]...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
        <pubDate>Fri, 13 May 2016 14:26:53 -0400</pubDate>
        <link>https://tech.greenhouse.io/2016/05/13/thors-method-name-limitations.html</link>
        <guid isPermaLink="true">https://tech.greenhouse.io/2016/05/13/thors-method-name-limitations.html</guid>
        
        <category>thor</category>
        
        <category>command-line</category>
        
        
      </item>
    
      <item>
        <title>Announcing Greenhouse&#39;s PHP Package</title>
        <description>&lt;p&gt;A couple weeks ago, I wrote a post about PHP’s Libcurl and its &lt;a href=&quot;https://tech.greenhouse.io/2016/03/21/php-has-a-multiselect-bug-and-rails-doesnt-like-it.html&quot;&gt;unfortunate interaction with Rails.&lt;/a&gt;  The long story made short is this: Rails does not like the way that PHP sends multiple values on one parameter in form submissions.  In that post, I suggested our users use &lt;a href=&quot;http://docs.guzzlephp.org/en/latest/&quot;&gt;Guzzle&lt;/a&gt;, which is a great library for interacting with APIs.  While that suggestion still works, we can also offer a second option today.&lt;/p&gt;

&lt;p&gt;Greenhouse is a great place to work and that is rarely more evident than when a problem like this presents itself.  After diagnosing this problem, I suggested to our management team that this would be best solved by growing our own Greenhouse PHP package.  It would hide implementation details from the user and could be written in such a way that both uses Guzzle and allow engineers to post to our applications endpoint in the most natural way.  It didn’t lead to weeks of meetings, bureaucracy, and review to ultimately be killed; instead, this clear solution was encouraged.  I was able to pause what I was working on and churn this package out, thus solving a problem for many of our current and future customers.  &lt;/p&gt;

&lt;p&gt;With that, I wrote &lt;a href=&quot;https://github.com/grnhse/greenhouse-tools-php&quot;&gt;Greenhouse Tools&lt;/a&gt; for our customers.  The Greenhouse Tools package exists to help engineers more quickly set up their Greenhouse job board by providing a package of tools for retrieving items from the &lt;a href=&quot;https://developers.greenhouse.io/job-board.html&quot;&gt;Greenhouse Job Board API&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;The part of this package that addresses the multiselect bug is the Application Service.  With the Greenhouse Application Service, I addressed the following three issues:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Greenhouse application endpoint’s requirement that required fields be verified on the client-side.  This package checks for the required flag in real-time and raises an error if any required fields are missing values.&lt;/li&gt;
  &lt;li&gt;Shield users from implementation details.  Users should know &lt;code&gt;$jobService-&amp;gt;getJobs();&lt;/code&gt; will always return a list of jobs, even if the implementation details have changed behind the scenes.  We don’t want our users always needing new libraries, just one that will always work.&lt;/li&gt;
  &lt;li&gt;Allowing engineers to post applications to Greenhouse in a way as close to the most natural implementation of PHP’s libcurl.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The only difference in posting via the Greenhouse service and posting via Libcurl is in the submission of multiple values to a single parameter.  While Libcurl would expect you to post the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

$postVars = array(
	&#39;first_name&#39; =&amp;gt; &#39;Tommy&#39;,
	&#39;last_name&#39; =&amp;gt; &#39;Tester&#39;,
	&#39;email&#39; =&amp;gt; &#39;tommy.tester@example.com&#39;,
	&#39;resume&#39; =&amp;gt; new \CURLFile(&#39;/path/to/resume.doc&#39;, 
                              &#39;application/msword&#39;, 
                              &#39;resume.doc&#39;),
	&#39;var[0]&#39; =&amp;gt; &#39;foo&#39;,
	&#39;var[1]&#39; =&amp;gt; &#39;bar&#39;,
	&#39;var[2]&#39; =&amp;gt; &#39;baz&#39;
);
curl_setopt($ch, CURLOPT_POSTFIELDS, $postVars);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Greenhouse application service lets you do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

$postVars = array(
	&#39;first_name&#39; =&amp;gt; &#39;Tommy&#39;,
	&#39;last_name&#39; =&amp;gt; &#39;Tester&#39;,
	&#39;email&#39; =&amp;gt; &#39;tommy.tester@example.com&#39;,
	&#39;resume&#39; =&amp;gt; new \CURLFile(&#39;/path/to/resume.doc&#39;, 
                              &#39;application/msword&#39;, 
                              &#39;resume.doc&#39;),
	&#39;var&#39; =&amp;gt; array(&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;)
);
$applicationService-&amp;gt;postApplication($postVars);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it!  The Greenhouse Application Service will translate this to a valid Guzzle request, validate required fields are included, and POST the application while not requiring the engineer have any knowledge of Guzzle.  If any errors are encountered in the process, we will throw a &lt;code&gt;GreenhouseException&lt;/code&gt; which can be caught and handled on the customer end.&lt;/p&gt;

&lt;p&gt;I was happy to be able to put this package together for our customers and to give Greenhouse a presence on Packagist.  I hope engineers find this package useful and it helps them to implement Greenhouse quickly and effectively on their websites.&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Apr 2016 00:00:00 -0400</pubDate>
        <link>https://tech.greenhouse.io/2016/04/04/announcing-greenhouse-php-package.html</link>
        <guid isPermaLink="true">https://tech.greenhouse.io/2016/04/04/announcing-greenhouse-php-package.html</guid>
        
        <category>php</category>
        
        
      </item>
    
      <item>
        <title>The Tech Lead Life</title>
        <description>&lt;p&gt;Every day is a different challenge. While there are some stretches of uninterrupted coding, more often there are coworkers to unblock, careers that need advising and processes that need tweaking.  We have grown, and continue to grow quickly, which brings with it the need for action and the thrill of making an impact.&lt;/p&gt;

&lt;p&gt;It doesn’t seem to matter what role I am in, I am always looking for ways to help wherever I can. In my 5 months of being a Technical Lead at Greenhouse, I already feel as though I’ve made a lasting impact. When I joined, we had split the engineers into 3 teams, in name only. Now each team has a separate backlog and they are free to collaborate on stories however they like. We have shifted the focus away from putting all the pressure on a single individual and instead encourage the team to work together to get the stories completed. In doing this we hope to help with another problem from growing quickly: knowledge silos.&lt;/p&gt;

&lt;p&gt;Also, as we have moved to Team backlogs, we have made Product’s job a little bit simpler. Now if they want something done they put it on one of the 3 backlogs, whereas before they had to coordinate with the Tech Leads to figure out which developer with the right skillset would be free at the right time. This in turn has freed up the meetings that the Engineering Managers have with Product to address larger issues. We have started filling this time with Retrospectives at the management level to raise and take action on higher level issues.&lt;/p&gt;

&lt;p&gt;Now that engineers feel a bit more freed up to help others on their team, they have started to pair program more. This has helped assimilate new engineers more quickly into the team and helped to disseminate previously caged knowledge.&lt;/p&gt;

&lt;p&gt;As a Tech Lead my responsibility is not just process, it is also technology. I’ve already had plenty of opportunities to work on stability and performance of the application. I’ve spent much time analyzing New Relic and adding code to enhance the usefulness of our logs. I’ve made a few dozen graphs in SumoLogic to track our database performance and occurrences of long lived locks. Also by tracking Unicorn logs, I found a few places where deadlocks, due to running in non-threadsafe mode, were causing requests to die.&lt;/p&gt;

&lt;p&gt;Pair-programming with the other members of my team on features and bug-fixes is my favorite part of the job. As a developer, you are always learning more about your codebase, your domain, your language, your editor, etc. Working directly with my teammates on code is the best way I have found to learn from them and their experiences. As Tech Lead it is a great opportunity to pass my knowledge and experience on to them as well and to give feedback about areas for improvement.&lt;/p&gt;

&lt;p&gt;Finally, having management responsibilities gives me an opportunity to guide my teammates on their careers. Everybody is at a different stage in their journey and has different goals and aspirations. I get to offer suggestions for how they can get to the next level and remove obstacles that are blocking them from growing. A big part of this is making sure that there is work coming into the team that aligns with everyone’s needs. I assisted in creating a Career Ladder for our engineers so they have a map of what we think it takes to move forward in their career. We’ve tried to make this a living document and to concentrate on the skills that our engineers need to do their jobs well, here at Greenhouse and when they become alumni. &lt;/p&gt;

&lt;p&gt;Balancing my time every day with the challenges I addressed above is difficult, but I lean on the other great members of my team for advice and guidance. Greenhouse’s co-founders also inspire and motivate. I shall leave you with their most repeated wisdom:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Delivering software is our competitive advantage&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;

&lt;blockquote&gt;
  &lt;p&gt;We want everybody to look back when they are Alumni and know they did some of the best work of their career while at Greenhouse&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Interested?&lt;/strong&gt; We’re hiring for a Tech Lead! &lt;a href=&quot;http://grnh.se/4n2oua&quot;&gt;Apply here&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Mar 2016 00:00:00 -0400</pubDate>
        <link>https://tech.greenhouse.io/2016/03/24/tech-lead-life.html</link>
        <guid isPermaLink="true">https://tech.greenhouse.io/2016/03/24/tech-lead-life.html</guid>
        
        
      </item>
    
      <item>
        <title>PHP Has A Multiselect Bug And Rails Doesn&#39;t Like It</title>
        <description>&lt;p&gt;As a solutions engineer at Greenhouse, I speak with many of our customers’ engineers. We engineers approach problems in different ways, using different skills. As a result, our customers often have different issues when setting up job boards. Most are easy to diagnose. Is the job board getting cut-off? It’s likely there’s a CSS layer covering it up. Font not carrying over? The source is probably not being sent over HTTPS. API rejecting applications? Probably forgot to base64-encode your API key. So, when one of our customers reported that they were submitting applications to our API, receiving a success response, but never seeing the applications appear in Greenhouse, it seemed likely this was another easily-solved configuration issue.&lt;/p&gt;

&lt;p&gt;Turned out, I was wrong.&lt;/p&gt;

&lt;p&gt;Full disclosure: I’m a career PHP programmer who had only a passing knowledge of Ruby before coming to Greenhouse. Adapting to the language was a challenge and I still have my moments where I miss access to a good Interface. When a customer was having issues submitting candidates to our API with PHP, I was not expecting to spend days on the problem - primarily because I had solved similar problems before. What I didn’t know was that the trickery I had previously used to get around a particular PHP bug would no longer work.&lt;/p&gt;

&lt;p&gt;The PHP Bug in question is &lt;a href=&quot;https://bugs.php.net/bug.php?id=51634&quot;&gt;found here&lt;/a&gt;. In summary, when using PHP’s Curl library, a POST request looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$postVars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;var1&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;var2&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;var3&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;curl_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://www.example.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CURL_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CURL_POSTFIELDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$postVars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;curl_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The Curl Library (libcurl) translates this array to POST parameters and sends along the request. It does all these things under the hood, so most of the important elements (like the HTTP multi-part boundary string) can’t be accessed outside the library. Mostly, this isn’t a problem. Except with multi-select form inputs. Some customers may want an application question asking the candidate to select the two programming languages they’re most proficient with from a pre-defined list. The customer then needs a way to communicate to our API both of those values tied to the same question. This presents a problem in PHP as the following parameter array will not work:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;$postVars = array(&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;#39;var1&amp;#39; =&amp;gt; &amp;#39;foo&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;#39;var2[]&amp;#39; =&amp;gt; &amp;#39;bar&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;#39;var2[]&amp;#39; =&amp;gt; &amp;#39;baz&amp;#39;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When sending the preceding example in to the curl_setopt, only ‘baz’ is sent as a parameter because the second var2[] index overwrites the first. PHP has addressed this problem by allowing the user to set an array index in the hash index:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;$postVars = array(&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;#39;var1&amp;#39; =&amp;gt; &amp;#39;foo&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;#39;var2[0]&amp;#39; =&amp;gt; &amp;#39;bar&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;#39;var2[1]&amp;#39; =&amp;gt; &amp;#39;baz&amp;#39;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The problem we ran in to at Greenhouse is that only PHP understands this nomenclature. As a Ruby shop, we expect the Rails convention, in which empty brackets &lt;code&gt;[]&lt;/code&gt; indicate multiple values on a single key. In other words, the above code block generates a query string that looks like &lt;code&gt;var2[0]=bar&amp;amp;var2[1]=baz&lt;/code&gt; while Rails is expecting (and only understands) &lt;code&gt;var2[]=bar&amp;amp;var2[]=baz&lt;/code&gt;. This was preventing Greenhouse from processing the data correctly. To increase the complexity, the form was also required to be encoded as &lt;code&gt;multipart/form-data&lt;/code&gt; since we had to accept resumes, cover letters, and any other files the customers wanted to submit. Now the POST parameters start to look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;$postVars = array(&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;#39;var1&amp;#39; =&amp;gt; &amp;#39;foo&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;#39;var2[0]&amp;#39; =&amp;gt; &amp;#39;bar&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;#39;var2[1]&amp;#39; =&amp;gt; &amp;#39;baz&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;#39;resume&amp;#39; =&amp;gt; new \CURLFile(&amp;#39;/path/to/resume.pdf&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;                              &amp;#39;application/pdf&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;                              &amp;#39;resume&amp;#39;)&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using my slightly out-of-date, pre-&lt;a href=&quot;http://php.net/manual/en/class.curlfile.php&quot;&gt;CURLFile&lt;/a&gt; knowledge of PHP, my workaround plan was to ignore the existence of CURLFile and use the old method of submitting multipart forms, which would have looked something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;$postVars = &amp;#39;var1=foo&amp;amp;&amp;#39; .&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;            &amp;#39;var2[]=bar&amp;amp;&amp;#39; .&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;            &amp;#39;var3[]=baz&amp;amp;&amp;#39; .&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;            &amp;#39;resume=@/path/to/resume.pdf;filename=resume;type=application/pdf&amp;#39;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the PHP 5.4 and earlier world, this would have worked just fine. It’s a bit of a hack, and ignores the superior and cleaner use of CURLFile, but it would have gotten the customer across the finish line. Unfortunately, my out-of-date PHP knowledge was just that – out of date. In the CURLFile world, the @ sign has been deprecated. Without using deprecated code – which may eventually be unsupported code – there’s no way for PHP to submit a multipart form with a multiselect and file upload to a non PHP system with libcurl.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&quot;http://docs.guzzlephp.org/en/latest/&quot;&gt;Guzzle&lt;/a&gt;. This incredibly useful library gets around libcurl’s limitations by bypassing it entirely and allowing PHP engineers to send multiselects in a way that non-PHP systems will understand. By giving each parameter its own hash, PHP can send the parameter correctly. Using Guzzle, submitting an application via Greenhouse’s API would look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GuzzleHttp\Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;base_uri&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://api.greenhouse.io/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Basic &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;base64_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;YOUR_API_KEY&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$postVars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;contents&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;contents&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;P&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;contents&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;123450&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;contents&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;tom@example.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;phone&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;contents&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;555-555-5555&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;question_0000001&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;contents&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;test this stuff&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;question_0000002[]&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;contents&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0099998&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;question_0000002[]&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;contents&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0099999&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;resume&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;resume&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;contents&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/resume.pdf&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;v1/applications&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;multipart&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$postVars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;headers&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The customer is now able to send the correct names for each part of the multiselect, which sidesteps the PHP bug with a widely-used, composer-friendly library.&lt;/p&gt;

&lt;p&gt;Because of the bug in PHP’s libcurl, Greenhouse now recommends Guzzle when using PHP to interact with Greenhouse’s API. This is the best option for engineers until such time PHP addresses their libcurl bug.&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Mar 2016 00:00:00 -0400</pubDate>
        <link>https://tech.greenhouse.io/2016/03/21/php-has-a-multiselect-bug-and-rails-doesnt-like-it.html</link>
        <guid isPermaLink="true">https://tech.greenhouse.io/2016/03/21/php-has-a-multiselect-bug-and-rails-doesnt-like-it.html</guid>
        
        <category>bugs</category>
        
        <category>php</category>
        
        
      </item>
    
      <item>
        <title>Launching Greenhouse Developers</title>
        <description>&lt;p&gt;Having recently left a previous life in developer relations to join Greenhouse, I was especially surprised to learn that Greenhouse provides several APIs but none of them were publicly documented. The documentation was difficult to reach inside of our app and it was organized in a way that made it time-consuming to navigate.  It wasn’t long before &lt;a href=&quot;https://www.twitter.com/rachel_leffel&quot;&gt;Rachel Leffel&lt;/a&gt; and I decided to revamp the experience.&lt;/p&gt;

&lt;p&gt;Today, we’re excited to launch &lt;a href=&quot;https://developers.greenhouse.io/&quot;&gt;Greenhouse Developers&lt;/a&gt;. It’s our first step toward crafting a top-notch product integration experience.  By exposing API documentation in a single publicly-accessible destination, current and potential customers have a powerful resource to brainstorm new solutions to seamlessly tie in Greenhouse with other products and services they use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/greenhouse_developers_launch.png&quot; alt=&quot;Screenshot of Harvest API Documentation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Following the lead of API providers like &lt;a href=&quot;https://developers.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt; and &lt;a href=&quot;https://developers.coinbase.com/&quot;&gt;Coinbase&lt;/a&gt;, we’ve built our docs using &lt;a href=&quot;https://github.com/tripit/slate&quot;&gt;Slate&lt;/a&gt;, a framework for creating beautiful single-page API docs.  Anyone who’s seen our documentation before will be delighted to discover that it’s been re-designed to be easier to navigate and digest.  Check it out on your phone, too!  It’s responsive and mobile friendly so you can read the docs whether you’re relaxing on a pink-sand beach in the Carribean or you’re about to skydive for the first time, and from 20,000 feet in the air you want to read your favorite passage of the Harvest API docs, possibly for the last time.&lt;/p&gt;

&lt;p&gt;This site is intended to be a living record of our APIs as they grow.  As an open source project &lt;a href=&quot;https://github.com/grnhse/greenhouse-api-docs&quot;&gt;on GitHub&lt;/a&gt;, every change is tracked and can be referenced in the git &lt;a href=&quot;https://github.com/grnhse/greenhouse-api-docs/commits/master&quot;&gt;commit log&lt;/a&gt;.  This also means we invite you, the reader, to suggest changes on GitHub.  Found a bug?  Create an issue to let us know.  If you’re feeling adventurous, fork our repo and make a pull request!  (It would really make my day if you did that :) )&lt;/p&gt;

&lt;p&gt;While it only hosts documentation today, we’ve got a greater vision for developers.greenhouse.io –  a centralized destination for developers, where you can find sample code for API bindings, and sample projects which demonstrate how to use those libraries.  Eventually, step by step tutorials and guidelines for best practices will live here.&lt;/p&gt;

&lt;p&gt;This is the first step in a series of exciting things in store for our customers.  Rumor has it that the &lt;a href=&quot;https://github.com/grnhse/greenhouse_io&quot;&gt;greenhouse_io&lt;/a&gt; Ruby gem may soon be seeing some improvements.&lt;/p&gt;

&lt;p&gt;We can’t wait to see what you’ll build with Greenhouse!&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Feb 2016 00:00:00 -0500</pubDate>
        <link>https://tech.greenhouse.io/2016/02/17/greenhouse-developers-launch.html</link>
        <guid isPermaLink="true">https://tech.greenhouse.io/2016/02/17/greenhouse-developers-launch.html</guid>
        
        <category>api</category>
        
        <category>integrations</category>
        
        
      </item>
    
      <item>
        <title>Onboarding - Reflect yourself</title>
        <description>&lt;p&gt;As I write this blogpost, it is day 5 for me at Greenhouse. I really loved the whole interview process with Greenhouse, and I am super excited to get working. But as all new employees know, before you can contribute to your company you have to go through the onboarding process. A large chunk of institutional knowledge has to be transfered from the employer to you. Everything from the individual responsibilities of each job, company culture and guidelines to where the bathrooms are, and where to grab some good food.&lt;/p&gt;

&lt;p&gt;For engineers, we have the additional dreaded task of setting up our environment and trying to learn the codebase. Every engineer has to go through the steps of taking that brand new laptop or desktop and configuring it to run the application you are going to work on. I’ve worked for a few different companies in my time and have consequently gone through various different approaches to getting that environment going. Everything from scheduled classes and side by side walk-throughs, to being given a laptop and told to figure it out. Greenhouse gave me a laptop the first day, had a couple of coworkers help me set up some accounts and then gave me a handy wiki page to start building everything out.&lt;/p&gt;

&lt;p&gt;As I was building my environment, I was told by many of the engineers to feel free to provide feedback. If I saw anything that was confusing or maybe could be done in a better manner to go ahead and provide feedback. I was super excited to hear this because most companies miss this opportunity. Onboarding should not only be about a new employee learning about their new company, but also their company learning about themselves.&lt;/p&gt;

&lt;p&gt;When a new employee struggles to understand something, the company often thinks that something is wrong with the onboarding process. They add new classes or revamp how they are teaching the old ones. But sometimes when a new employee struggles to understand some new process it really means that process is too complex. The onboarding process provides clear feedback on how your company looks to an outsider, and every company should be leveraging the feedback from onboarding to fix the hidden problems within their own organization. This is especially true for the software we write. If a new dev has a really hard time understanding how the code works, or if it takes them forever to set up their environment, you just got a strong signal that something is wrong in your code and you should be investigating it.&lt;/p&gt;

&lt;p&gt;So the next time when you onboard a new employee, pay close attention to them during the process. Here are a couple of things to keep in mind:&lt;/p&gt;

&lt;h3 id=&quot;your-cognitive-bias---the-curse-of-knowledge&quot;&gt;Your Cognitive Bias - The Curse of Knowledge&lt;/h3&gt;

&lt;p&gt;Imagine your sweet old grandmother calls you up for help with her email. Something is wrong with her gmail and nothing works. You tell her to push F5 to refresh the browser and she hits the ‘F’ key and then the ‘5’. You get immediately frustrated because how could anyone not know what the ‘F5’ key is. Of course, you are a good grandchild and don’t say anything about it. She’s 90 years old, you remind yourself. She hasn’t used computers for that long and its all new to her.&lt;/p&gt;

&lt;p&gt;The initial frustration you are feeling with your poor grandmother (who you never call by the way), comes from a cognitive bias called &lt;a href=&quot;https://en.wikipedia.org/wiki/Curse_of_knowledge&quot;&gt;The Curse of Knowledge&lt;/a&gt;. Basically you as a human being tend to assume that other people have the same knowledge that you do and will therefore act as you would. Your brain knows what an ‘F5’ key is so it assumes your grandmother does as well. This is the same thing for new employees. If an onboarding process or code structure seems obvious to you but confounding to a new employee, its not because the new employee is a dud. They simply do not have all the knowledge that you do. More importantly when they get really stuck, whatever knowledge they need to proceed is not easily discoverable. So when you see that smart new dev struggling to set up their environment, this is a signal that something could be wrong.&lt;/p&gt;

&lt;h3 id=&quot;world-standards-vs-company-standards&quot;&gt;World standards vs Company Standards&lt;/h3&gt;

&lt;p&gt;I live in an old apartment in New York City, which means my apartment has some quirks. Specifically, for reasons I don’t understand, the cold and hot water is reversed in all the sinks and the shower in my apartment. Yes, in my apartment cold is on the left and hot is on the right. Now I have lived there for several years so I don’t even think about it anymore. However, whenever someone visits me they are quickly suprised when they turn the wrong knob and suddenly the cold glass of water they were expecting is instead luke-warm. Essentially there is a deviation between the standard US temperature controls and the temperature controls in my apartment.&lt;/p&gt;

&lt;p&gt;This happens a lot with software and processes as well. A new employee tries to do something that follows a general standard and is surprised to find out that it doesn’t work. This is your cue as the business that you have deviated from the rest of the world. New employees are the best people to alert you to these differences, because they don’t have the biases that everyone in the company has from working there for years. Just how I no longer think about turning the left handle to get cold water, so too will you easily forget that the patterns you use at your company may not be the same as the rest of the world.&lt;/p&gt;

&lt;p&gt;Once that happens now you have to ask yourself: “why?”.&lt;/p&gt;

&lt;h3 id=&quot;reasons-to-deviate-historical-vs-purposeful&quot;&gt;Reasons to Deviate: Historical vs Purposeful&lt;/h3&gt;

&lt;p&gt;When you are providing an explanation to a new employee about why you would use a bastardized version of XML instead of the accepted world standard, be aware of the type of reasons that you are giving: Historical or Purposeful.&lt;/p&gt;

&lt;p&gt;A purposeful reason is a change made to accomplish some goal, whereas a historical reason is a cause and effect history of how something got to the state it is. The difference here can be subtle, but it’s important. Here are two examples:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/&quot;&gt;Elasticsearch&lt;/a&gt; is free text search engine that uses a RESTful HTTP JSON API. Basically anytime you want to do anything with Elasticsearch you make a web request with your data as a JSON object in the body. There is one call where this differs: the bulk insert. For this one operation you must supply the data in JSON objects separated by newlines instead of in a proper JSON array. Why not an array you may ask? Because if you had 20,000 objects pased in an array you would have to parse the whole body in one go, whereas objects seperated by newlines can be streamed. Elasticsearch deviates from a standard to make their bulk processing more performant. Elasticsearch deviated from the world standard to achieve a specific goal.&lt;/p&gt;

&lt;p&gt;At a company I previously worked at (which shall rename nameless), I had to make a url that would reply with all comments on an article in XML for the company’s search engine. Except that instead of normal XML with the starting XML tag and all the data in a root node, I had to strip it all down to just an a bunch of comment nodes all in sequence. Why was this? Well the guy who original wrote the script to import comments had built it that way and had since left the company. Nobody on his team knew how it worked and so no one ever touched it. This explanation is more about the history of the product, rather than a specific goal trying to be met.&lt;/p&gt;

&lt;p&gt;I tend to be very suspicious of historical reasons. Typically these reasons are more about being lazy and/or unwilling to invest in refactoring code, than sound technical decisions. That doesn’t mean that historical reasons can’t be good decisions, say for instance you are Facebook and you have too much data to run migrations. But chances are more likely that your historical reasons are pretty poor. So if you hear yourself explaining something to the new dev by recalling the history of something, you should be immediately suspicious of this decision.&lt;/p&gt;

&lt;h3 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;As you go through this process with new hires, remember that none of these signals will tell you whether something is bad or good. It’s just a good place to take some honest reflection. Maybe your company has a very good reason for WSDL files, or using non-standard XML. But the important thing with these roadbumps is to have conscious reasons for the hard parts of your apps. This honest reflection will help point to great refactoring points and should improve the quality of your code overall.&lt;/p&gt;

&lt;p&gt;Greenhouse is smart enough to ask for this type of feedback, and I am excited to get working here. Want to join? Apply &lt;a href=&quot;http://grnh.se/jwi0xc&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Dec 2015 00:00:00 -0500</pubDate>
        <link>https://tech.greenhouse.io/2015/12/17/onboarding-reflections.html</link>
        <guid isPermaLink="true">https://tech.greenhouse.io/2015/12/17/onboarding-reflections.html</guid>
        
        <category>refactoring</category>
        
        
      </item>
    
      <item>
        <title>Dec 3 Full-Stack Engineering Meetup</title>
        <description>&lt;p&gt;On Thursday, 2015-12-03, Greenhouse
&lt;a href=&quot;http://www.meetup.com/Full-Stack-Engineering-Meetup/events/226759344/&quot;&gt;hosted&lt;/a&gt;
the &lt;a href=&quot;http://www.meetup.com/Full-Stack-Engineering-Meetup/&quot;&gt;Full Stack Engineering
Meetup&lt;/a&gt;.  Greenhouse’s
own &lt;a href=&quot;https://github.com/danajp&quot;&gt;Dana Pieluszczak&lt;/a&gt; presented our cutting edge
deployment infrastructure as we plan a large migration to AWS. His talk
described Greenhouse’s motivation for migrating from Heroku to AWS proper, and
the reasoning that went into the design of our own PaaS. The stack leverages
Docker containers running on a Mesos/Marathon cluster with a simple Rails API
and Ruby CLI for administration, and it includes some neat features such as the
ability to spin up independent, ephemeral staging/testing environments for QA
and acceptance testing.&lt;/p&gt;

&lt;p&gt;Also, presenting were &lt;a href=&quot;https://www.linkedin.com/in/klupowitz&quot;&gt;Kevin Lupowitz&lt;/a&gt;
and &lt;a href=&quot;https://www.linkedin.com/in/victor-cuascut-38940b21&quot;&gt;Victor Cuascut&lt;/a&gt; from
&lt;a href=&quot;https://clearme.com/&quot;&gt;CLEAR&lt;/a&gt;. Kevin gave a brief overview of CLEAR’s biometric
platform that uses fingerprints and retina scans to identify customers.
Initially, CLEAR built partnerships with the TSA for fast-track security
clearance at select airports in the US, but it has now expanded to work with
companies such as the New York Yankees to provide seamless entry into the
stadium as well as self-service beer. Victor took over to dive deep into
CLEAR’s AWS-based infrastructure. He went over the limitations of working with
AWS GovCloud and the challenges of migrating some services to AWS’s normal
cloud. CLEAR also leverages Mesos through Mesosphere running on top of AWS ECS
and autoscaling groups.&lt;/p&gt;

&lt;p&gt;Please look out for our next event in January 2016, and visit
&lt;a href=&quot;http://grnh.se/wqbsa3&quot;&gt;greenhouse.io/careers&lt;/a&gt;: We’re hiring for an Engineering
Lead (Customer Solutions), Full Stack Software Engineers, as well as many other
roles.&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Dec 2015 00:00:00 -0500</pubDate>
        <link>https://tech.greenhouse.io/2015/12/16/fse_meetup_snackoverflow.html</link>
        <guid isPermaLink="true">https://tech.greenhouse.io/2015/12/16/fse_meetup_snackoverflow.html</guid>
        
        <category>meetups</category>
        
        
      </item>
    
      <item>
        <title>Passing the Test</title>
        <description>&lt;p&gt;Greenhouse test automation was born in late 2013. By born I mean we hired a recent Flatiron School grad named Matt Schmaus - over several experienced test engineers - and told him to build our RSpec suite. But that’s not all. A year later, the company promoted Matt to associate software engineer; he now builds features on our fullstack engineering team.  &lt;/p&gt;

&lt;p&gt;This story sold me on Greenhouse when I interviewed for the test automation team last fall, a few months out of a Javascript bootcamp at Fullstack Academy. Matt and his colleagues convinced me that I’d not only earn responsibility over testing, but I’d also get the mentorship I needed to become a true fullstack engineer. &lt;/p&gt;

&lt;p&gt;As Greenhouse’s sales and fundraising boom, our tech team has grown fast. We’re over 30 engineers - more than double the size when I started - with several openings. Since Matt, six junior engineers have joined test automation as a first step onto the Greenhouse tech team. Most joined from a Ruby or Javascript bootcamp, without significant experience in testing. All are thriving at Greenhouse, and many have been promoted – check it out:&lt;/p&gt;

&lt;h5 id=&quot;greenhouse-test-automation-engineers-taes&quot;&gt;&lt;em&gt;Greenhouse Test Automation Engineers (TAEs)&lt;/em&gt;&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Software Development Education&lt;/th&gt;
      &lt;th&gt;Date Joined&lt;/th&gt;
      &lt;th&gt;Where Now&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Flatiron School&lt;/td&gt;
      &lt;td&gt;Nov 2013&lt;/td&gt;
      &lt;td&gt;Fullstack engineer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;General Assembly&lt;/td&gt;
      &lt;td&gt;July 2014&lt;/td&gt;
      &lt;td&gt;Fullstack engineer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Prior work&lt;/td&gt;
      &lt;td&gt;Nov 2014&lt;/td&gt;
      &lt;td&gt;QA lead&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fullstack Academy&lt;/td&gt;
      &lt;td&gt;Dec 2014&lt;/td&gt;
      &lt;td&gt;TAE, in transition to fullstack engineer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fullstack Academy&lt;/td&gt;
      &lt;td&gt;Apr 2015&lt;/td&gt;
      &lt;td&gt;TAE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fullstack Academy&lt;/td&gt;
      &lt;td&gt;Jul 2015&lt;/td&gt;
      &lt;td&gt;TAE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;App Academy&lt;/td&gt;
      &lt;td&gt;Aug 2015&lt;/td&gt;
      &lt;td&gt;TAE&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;what-we-do&quot;&gt;&lt;em&gt;What We Do&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;Test automation engineers learn our complex Rails app by writing comprehensive RSpec tests, including unit tests, controller specs and feature scripts. You name the team priority – we’re involved.  For example, we’re on the home stretch of fully automating the manual regression required to release code; it used to take hours. This huge win enables us to move from weekly releases to multiple feature-based releases a week.  We wrote cross-browser specs when we spun off our critical job boards into a service. We’re adding infrastructure specs, and Jasmine tests to cover Angular features.  We even hold regular training on how to test at Greenhouse.   &lt;/p&gt;

&lt;h5 id=&quot;how-we-hire&quot;&gt;&lt;em&gt;How We Hire&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;Greenhouse finds test automation candidates through bootcamp hiring nights, referrals and applications through our website. Another fruitful source is our fullstack engineering pipeline. Sometimes, we’ll spot a candidate with high potential who’s struggled on some parts of our senior interview. We encourage these applicants to interview for test automation engineer – as a path to advancing within our tech team. And want to stand out? Head to the monthly fullstack engineering &lt;a href=&quot;http://www.meetup.com/Full-Stack-Engineering-Meetup/&quot;&gt;meetup&lt;/a&gt; and meet us. &lt;/p&gt;

&lt;p&gt;Our process starts with a 30 minute technical phone screen. Pass that and move to a one hour phone interview; we’ll test your tech skills more deeply and talk about your motivations for the job. &lt;/p&gt;

&lt;p&gt;Count on questions about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Javascript&lt;/li&gt;
  &lt;li&gt;Software Architecture&lt;/li&gt;
  &lt;li&gt;Data Structures&lt;/li&gt;
  &lt;li&gt;Databases&lt;/li&gt;
  &lt;li&gt;The Internet&lt;/li&gt;
  &lt;li&gt;Testing&lt;/li&gt;
  &lt;li&gt;Rails (if you have the background)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last step is coming onsite for a few hours of coding and cultural interviews.  Expect live programming, and be ready to walk us through your work and explain your decisions. We value thoughtful planning. &lt;/p&gt;

&lt;h5 id=&quot;who-we-look-for&quot;&gt;&lt;em&gt;Who We Look For&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;We like test automation candidates who are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Skilled&lt;/em&gt;. You have a solid, broad tech grounding – at a level that shows you’ve nailed the bootcamp curriculum and then some.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;High-potential&lt;/em&gt;.  You are motivated to keep improving. &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Nice&lt;/em&gt;.  We want to work with you. &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Coachable&lt;/em&gt;.  You’re receptive to code review and excited to learn from amazing senior programmers. &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Responsible&lt;/em&gt;.  You’ll roll up your sleeves and fix problems, even if you didn’t introduce them.  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;how-we-mentor&quot;&gt;&lt;em&gt;How We Mentor&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;Every test automation engineer is assigned a senior mentor – count on regular 1:1 meetings and ad hoc pair programming.  But you have access to the whole engineering team. Stuck on testing Angular? Grab an experienced front-end engineer. Errors deploying to a staging environment? Somebody’s been there. There’s also regular whiteboarding sessions, where we teach each other through books like &lt;em&gt;Ruby Metaprogramming&lt;/em&gt; and &lt;em&gt;Clean Code&lt;/em&gt;. &lt;/p&gt;

&lt;h5 id=&quot;months-later&quot;&gt;&lt;em&gt;10 Months Later&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;As promised at my interview, I quickly earned responsibility over testing, and am not far from a senior engineer when I have questions. Five months in, I got my first feature card. &lt;/p&gt;

&lt;p&gt;Most bootcamps tell grads they’re immediately ready to excel in production. I sure wasn’t. But I’m deeply grateful for my testing foundation. For one, a production code base is more complicated than anything most junior engineers have seen. Writing specs teaches you how to navigate a complex feature’s path across the full stack. Two, an engineer who respects testing is much less likely to introduce bugs. Already, I’ve used tests to catch my own feature bugs before they hit production. &lt;/p&gt;

&lt;p&gt;By now, the majority of my cards are features - I’m a full stack engineer. &lt;/p&gt;

&lt;h5 id=&quot;interested&quot;&gt;&lt;em&gt;Interested?&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;http://grnh.se/j7uowc&quot;&gt;We’re hiring!&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 15 Oct 2015 00:00:00 -0400</pubDate>
        <link>https://tech.greenhouse.io/2015/10/15/passing-the-test.html</link>
        <guid isPermaLink="true">https://tech.greenhouse.io/2015/10/15/passing-the-test.html</guid>
        
        <category>testing</category>
        
        <category>hiring</category>
        
        
      </item>
    
      <item>
        <title>Effectively Debugging Capybara Feature Specs</title>
        <description>&lt;p&gt;Capybara/Selenium feature specs can be one of the most frustrating types of tests. There is a lot of unexpected behavior and many pieces to keep in mind. Code runs in separate threads, and both AJAX behavior and Capybara find methods create timing issues. The aim of this post is to describe a workflow that makes debugging more efficient.&lt;/p&gt;

&lt;h3 id=&quot;understand-capybara-waiting-behavior&quot;&gt;1. Understand Capybara waiting behavior&lt;/h3&gt;
&lt;p&gt;Default waiting behavior is the key aspect to understand in writing Capybara specs. The software consultancy thoughtbot has an &lt;a href=&quot;https://robots.thoughtbot.com/write-reliable-asynchronous-integration-tests-with-capybara&quot;&gt;excellent blog post&lt;/a&gt; on writing asynchronous integration tests with Capybara. As the post makes clear, you can use the default wait behavior of many Capybara methods to build a more reliable test that fails less often due to timing issues.
For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.user&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;data-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Joe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above method lacks waiting behavior since the attribute [“data-name”] is immediately requested. But the method below gains the benefits of default waiting behavior by using a css selector to find the element on the page. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.user[data-name=&amp;#39;Joe&amp;#39;]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If Capybara cannot find an element immediately, it will keep retrying for a default of two seconds before the spec fails. You can configure the default wait time, which was recently renamed for semantic purposes to default_max_wait_time. Most find methods also have an option that you can pass to configure the wait time. &lt;code&gt;find(&#39;.selector&#39;, wait: 5)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;use-break-points&quot;&gt;2. Use break points&lt;/h3&gt;
&lt;p&gt;I use pry for pretty much every aspect of development as well as for writing tests. My guess is that most developers write Selenium specs by repeatedly writing a few lines of code and running the test. Breakpoints give you a more efficient workflow – just insert a breakpoint, write some code and check that it works before adding to your test. You get a much faster feedback loop, and avoid the guessing and checking that commonly happens with selecting elements on a page. Check out the gif below; it demonstrates the coding process from within a pry breakpoint. Again, just run a command in pry; if it works, copy and paste it into your text editor. &lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/sign_in.gif&quot; alt=&quot;sign in gif&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tail-the-logs&quot;&gt;3. Tail the logs&lt;/h3&gt;
&lt;p&gt;There are many benefits to tailing the test logs. You can see errors that don’t bubble up to the UI layer, providing more accurate information when your test fails. You can also see the actions performed on database records and associations. Watching the log is easy – run &lt;code&gt;tail -f log/test.log&lt;/code&gt;. &lt;/p&gt;

&lt;h3 id=&quot;reload-your-objects-before-asserting-object-values&quot;&gt;4. Reload your objects before asserting object values&lt;/h3&gt;
&lt;p&gt;I often pair with teammates to help debug a spec. Too many times, we’ve gotten stuck on Capybara code that was written perfectly – except for one simple method called &lt;code&gt;reload&lt;/code&gt;. Let’s check out an example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;fill_in&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;David&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;click_button&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Save&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;David&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Although the above spec seems fine, it will actually fail. Why? The ‘user’ object loaded in memory hasn’t retrieved or reloaded the new data that we modified in the database. Adding a &lt;code&gt;user.reload&lt;/code&gt; solves this problem.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;fill_in&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;David&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;click_button&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Save&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;David&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Side Note: Some may argue that you shouldn’t test your database in a feature spec. After all, a feature spec’s role is to mimic the user’s perspective visiting at a page. We do tread quite lightly on database actions in our feature specs. Most often, we’ll do a light check like this (assuming the &lt;code&gt;click_button(&#39;Save&#39;)&lt;/code&gt; is saving a new user to the database)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;click_button&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Save&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;test-failure-screenshots&quot;&gt;5. Test Failure Screenshots&lt;/h3&gt;
&lt;p&gt;We run our test suite on &lt;a href=&quot;https://travis-ci.org&quot;&gt;TravisCI&lt;/a&gt;. Sometimes, specs that pass on a developer’s computer will fail when being run by TravisCI. This can happen for a variety of reasons: timing issues related to hardware differences, poorly written specs that can have side effects, etc.&lt;/p&gt;

&lt;p&gt;It can be very difficult to debug these specs. One problem is the lack of tools. You could use &lt;code&gt;puts&lt;/code&gt; statements around failing code and watch your TravisCI server logs. This can be time consuming and you’ll still have no idea what’s going on in the view. &lt;/p&gt;

&lt;p&gt;A useful alternative is to take a screenshot of the page on failure and to use the &lt;code&gt;travis-artifacts&lt;/code&gt; library to upload it to a storage service like &lt;a href=&quot;http://aws.amazon.com/s3/&quot;&gt;Amazon S3&lt;/a&gt;. The documentation on setting up this tool? Let’s say not so hot. Perhaps we can talk about the process in an upcoming blog post.&lt;/p&gt;

&lt;h3 id=&quot;performance-considerations&quot;&gt;6. Performance Considerations&lt;/h3&gt;
&lt;p&gt;We use the Selenium driver when developing our tests.  This lets us view how the test runner interacts with the page. For performance reasons, we switch to the &lt;code&gt;capybara-webkit&lt;/code&gt; driver once we’re happy with the test.&lt;/p&gt;

&lt;p&gt;Tell us what you think in the comments and feel free to share some tips that you use during your everyday writing of Capybara tests.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://grnh.se/5tebd2&quot;&gt;We’re hiring!&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Oct 2015 00:00:00 -0400</pubDate>
        <link>https://tech.greenhouse.io/2015/10/07/effectively-debugging-capybara-feature-specs.html</link>
        <guid isPermaLink="true">https://tech.greenhouse.io/2015/10/07/effectively-debugging-capybara-feature-specs.html</guid>
        
        <category>testing</category>
        
        <category>capybara</category>
        
        <category>selenium</category>
        
        <category>rspec</category>
        
        
      </item>
    
  </channel>
</rss>
